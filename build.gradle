plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'com.palantir.docker' version '0.25.0'
}

group = 'com.shri.orderservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-artemis'
    implementation 'org.springframework.statemachine:spring-statemachine-core:2.2.0.RELEASE'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.2.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-config:2.2.2.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.2.RELEASE'
    compileOnly 'org.projectlombok:lombok'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile "com.github.tomakehurst:wiremock-jre8:2.27.2"
    testCompile "org.apache.activemq:artemis-jms-server"
    testCompile "org.awaitility:awaitility"
}


// configuration of docker task
apply plugin: 'com.palantir.docker'
bootJar {
    layered {
        enabled = true
        includeLayerTools = true
    }
}
docker {
    name "${project.name}:${project.version}"
    tag project.name, project.version as String
    dockerfile file('src/main/docker/Dockerfile')
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()] as Map<String, String>)
    labels(['project':project.name])
    noCache true
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
}
test {
    useJUnitPlatform()
}
